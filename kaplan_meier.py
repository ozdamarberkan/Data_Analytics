# -*- coding: utf-8 -*-
"""kaplan_meier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JkPSl4zS0_j_ae-eHiD0XLkKS4KQKMDd
"""

!pip install scikit-survival
!pip install lifelines
# !pip install feature-engine
# !pip install pomegranate
# !pip install graphviz

import pandas as pd
from lifelines import KaplanMeierFitter
import numpy as np

# Sometimes it works when ran twice

import sksurv
import sksurv.datasets

'''
Variable 	Name		Description			                Codes / Values
*******************************************************************************************************
1		     id		    Identification Number			    1 - 500
2		    age		    Age at Hospital Admission		    Years
3 	    	gender		Gender 					            0 = Male, 1 = Female
4    		hr		    Initial Heart Rate			        Beats per minute
5		    sysbp		Initial Systolic Blood Pressure 	mmHg
6	    	diasbp		Initial Diastolic Blood Pressure	mmHg
7    		bmi		    Body Mass Index			 	        kg/m^2
8		    cvd		    History of Cardiovascular Disease	0 = No, 1 = Yes						
9		    afb		    Atrial Fibrillation			        0 = No, 1 = Yes						
10  		sho		    Cardiogenic Shock			        0 = No, 1 = Yes						
11  		chf		    Congestive Heart Complications		0 = No, 1 = Yes						
12  		av3		    Complete Heart Block			    0 = No, 1 = Yes				
13  		miord		MI Order 				            0 = First, 1 = Recurrent
14  		mitype		MI Type 				            0 = non Q-wave, 1 = Q-wave
15  		year		Cohort Year				            1 = 1997, 2 = 1999, 3 = 2001				
16  		admitdate	Hospital Admission Date 		    mm/dd/yyyy
17  		disdate		Hospital Discharge Date 		    mm/dd/yyyy
18  		fdate		Date of last Follow Up 			    mm/dd/yyyy
19  		los		    Length of Hospital Stay			    Days from Hospital Admission
								 	                            to Hospital Discharge
20 	    	dstat		Discharge Status from Hospital		0 = Alive, 1 = Dead
21	    	lenfol		Total Length of Follow-up		    Days from Hospital Admission Date
									                            to Date of Last Follow-up 
22	    	event		Vital Status at Last Follow-up		0 = Alive 1 = Dead
'''

# load data
data, labels = sksurv.datasets.load_whas500()

data = data.astype(np.int32)
print(data.columns)

# total admission date + total follow up days
data['event'] = [label[0] for label in labels]
# data['time'] = [x.days for x in data.time]

data.head()

kmf = KaplanMeierFitter()
kmf.fit(durations =  data.los, event_observed = data['event'])
kmf.plot_survival_function()

# data_event_0 = data.loc[data["event"]==0]
# data_event_1 = data[data["event"]==1]

weights = list()

for i, patient in data.iterrows():
  if patient["event"] == 0:
    patient_time = patient["los"]
    patient_prediction = kmf.predict(patient_time)
    weights.append(1/patient_prediction)
  else:
    weights.append(0)

print(weights)

import csv

with open('weights', 'w') as myfile:
    wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
    wr.writerow(weights)

data_male = data.loc[data["gender"]==0]
data_female = data[data["gender"]==1]

data_male.head(6)

kmf = KaplanMeierFitter()
kmf.fit(durations =  data_male.los, event_observed = data_male['event'], label='male')
ax = kmf.plot_survival_function()

kmf.fit(durations =  data_female.los, event_observed = data_female['event'], label='female')
ax = kmf.plot_survival_function(ax =ax)

data_cvd_0 = data.loc[data["cvd"]==0]
data_cvd_1 = data[data["cvd"]==1]

kmf = KaplanMeierFitter()
kmf.fit(durations =  data_cvd_0.los, event_observed = data_cvd_0['event'], label='cvd_0')
ax = kmf.plot_survival_function()

kmf.fit(durations =  data_cvd_1.los, event_observed = data_cvd_1['event'], label='cvd_1')
ax = kmf.plot_survival_function(ax =ax)

data_miord_0 = data.loc[data["miord"]==0]
data_miord_1 = data[data["miord"]==1]

kmf = KaplanMeierFitter()
kmf.fit(durations =  data_miord_0.los, event_observed = data_miord_0['event'], label='miord_0')
ax = kmf.plot_survival_function()

kmf.fit(durations =  data_miord_1.los, event_observed = data_miord_1['event'], label='miord_1')
ax = kmf.plot_survival_function(ax =ax)

data_av3_0 = data.loc[data["av3"]==0]
data_av3_1 = data[data["av3"]==1]

kmf = KaplanMeierFitter()
kmf.fit(durations =  data_av3_0.los, event_observed = data_av3_0['event'], label='av3_0')
ax = kmf.plot_survival_function()

kmf.fit(durations =  data_av3_1.los, event_observed = data_av3_1['event'], label='av3_1')
ax = kmf.plot_survival_function(ax =ax)

data_age_40 = data.loc[(data["age"]>=40) & (data["age"]< 50)]
data_age_50 = data.loc[(data["age"]>=50) & (data["age"]< 60)]
data_age_60 = data.loc[(data["age"]>=60) & (data["age"]< 70)]
data_age_70 = data.loc[(data["age"]>=70) & (data["age"]< 80)]
data_age_80 = data.loc[data["age"]>=80]

kmf = KaplanMeierFitter()
kmf.fit(durations =  data_age_40.los, event_observed = data_age_40['event'], label='age>=40')
ax = kmf.plot_survival_function()

kmf.fit(durations =  data_age_50.los, event_observed = data_age_50['event'], label='age>=50')
ax = kmf.plot_survival_function(ax =ax)

kmf.fit(durations =  data_age_60.los, event_observed = data_age_60['event'], label='age>=60')
ax = kmf.plot_survival_function(ax =ax)

kmf.fit(durations =  data_age_70.los, event_observed = data_age_70['event'], label='age>=70')
ax = kmf.plot_survival_function(ax =ax)

kmf.fit(durations =  data_age_80.los, event_observed = data_age_80['event'], label='age>=80')
ax = kmf.plot_survival_function(ax =ax)

data['weights'] = [round(x, 2) for x in weights]
data.head()

# from feature_engine.discretisation import EqualWidthDiscretiser
# from sklearn.model_selection import train_test_split

# disc = EqualWidthDiscretiser(bins=8, variables=['age'])
# disc.fit(data)
# new_binned_age_data = disc.transform(data)

# data['new_binned_age'] = new_binned_age_data['age']

# factors = ['new_binned_age', 'diasbp', 'cvd', 'av3', 'miord', 'hr', 'sysbp', 'los']

# newdata = data[factors + ['weights']]
# train, test, y_train, y_test = train_test_split(newdata, newdata, test_size=.80, random_state = 20)

# weights = train[["weights"]].to_numpy()
# weights = np.reshape(weights, (np.product(weights.shape),))
# train = train[factors]

# position_of_dependent_variable = newdata.columns.get_loc('los')
# test = test[factors]
# test_y = test['los']
# test['los'] = None

# !apt install libgraphviz-dev
# !pip install pygraphviz